{"version":3,"sources":["components/Intro.js","apis/questionsJSON.js","components/QuestionCard.js","actions/index.js","components/Quiz.js","components/Results.js","components/Routes.js","reducers/index.js","reducers/questionsReducer.js","reducers/incrementReducer.js","reducers/answerReducer.js","index.js"],"names":["Intro","className","to","axios","create","baseURL","QuestionCard","answerQuestion","answer","correctAnswer","props","questions","questionNumber","correct_answer","logAnswer","answerChosen","isCorrect","length","navigateToResults","questionIncrement","DOMPurify","sanitize","this","renderQuestionInfo","onClick","React","Component","connect","state","count","answers","type","answerObj","payload","Quiz","history","push","pathname","fetchQuestions","dispatch","a","async","questionJSON","get","questionsObj","data","results","Results","numberCorrect","filter","renderIcon","playAgain","incrementReset","answersReset","map","i","key","question","style","margin","Routes","path","component","combineReducers","action","ReactDOM","render","store","createStore","reducers","applyMiddleware","thunk","document","querySelector"],"mappings":"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","file":"static/js/main.67b3ba4e.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Intro = () => {\n  return (\n    <div className='ui center aligned container'>\n      <h1>Welcome to the Trivia Challenge!</h1>\n      <p>You will be presented with 10 True or False questions.</p>\n      <p>Can you score 100%?</p>\n      <Link to={'/quiz'}><button className='ui button'>BEGIN</button></Link>\n    </div>\n  )\n}\n\nexport default Intro","import axios from 'axios'\n\n// use axios and set base URL for fetching data in action creators\nexport default axios.create({\n  baseURL: 'https://opentdb.com'\n})","import React from 'react'\nimport DOMPurify from 'dompurify'\nimport { connect } from 'react-redux'\nimport { questionIncrement, logAnswer } from '../actions'\n\nclass QuestionCard extends React.Component {\n  answerQuestion = (answer) => {\n    let correctAnswer = this.props.questions[this.props.questionNumber].correct_answer\n    // check if answer is correct, send object to redux with answer chosen, correct answer and isCorrect if they match\n    this.props.logAnswer({\n      answerChosen: answer,\n      correctAnswer: correctAnswer,\n      isCorrect: answer === correctAnswer\n    })\n    // if last question is answered, navigate to results page \n    if (this.props.questionNumber >= this.props.questions.length -1) {\n      this.props.navigateToResults()\n    }\n    // increment question number\n    this.props.questionIncrement()\n  }\n  render() {\n    return(\n      <div className='ui centered card'>\n        <div className='content'>\n          <div className='description'>\n            {DOMPurify.sanitize(this.props.renderQuestionInfo('question'))}\n          </div>\n        </div>\n        <div className=\"extra content\">\n          <div className=\"ui two buttons\">\n            <div className=\"ui basic green button\" onClick={() => this.answerQuestion('True')}>True</div>\n            <div className=\"ui basic red button\" onClick={() => this.answerQuestion('False')}>False</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { \n    questions: state.questions,\n    questionNumber: state.count,\n    answers: state.answers\n  }\n}\n\nexport default connect(mapStateToProps, { questionIncrement, logAnswer })(QuestionCard)","import questionJSON from '../apis/questionsJSON'\n\nexport const fetchQuestions = () => {\n  // redux-thunk used to handle async/await with redux\n  return async (dispatch) => {\n    const questionsObj = await questionJSON.get('/api.php?amount=10&difficulty=hard&type=boolean')\n    // dispatch manually once object is fetched\n    dispatch({\n      type: 'FETCH_QUESTIONS',\n      payload: questionsObj.data.results\n    })      \n  }\n}\n\nexport const questionIncrement = () => {\n  return {\n    type: 'INCREMENT'\n  }\n}\n\nexport const incrementReset = () => {\n  return {\n    type: 'INCREMENT_RESET',\n  }\n}\n\nexport const logAnswer = (answerObj) => {\n  return {\n    type: 'LOG_ANSWER',\n    payload: answerObj\n  }\n}\n\nexport const answersReset = () => {\n  return {\n    type: 'ANSWERS_RESET',\n  }\n}","import React from 'react'\nimport QuestionCard from './QuestionCard'\nimport { connect } from 'react-redux'\nimport { fetchQuestions } from '../actions'\n\nclass Quiz extends React.Component {\n  // fetch questions at initial page load\n  componentDidMount() {\n    this.props.fetchQuestions()\n  }\n  // single function to render different info types from questions object\n  renderQuestionInfo = (type) => {\n    // conditional to avoid error before questions are fetched\n    if(this.props.questions.length > 0) {\n      return this.props.questions[this.props.questionNumber][type]\n    }\n  }\n  // navigate to results page for use after answering the last question\n  navigateToResults = () => {\n    return this.props.history.push({\n      pathname: '/results'\n    })\n  }\n  render() {\n    return(\n      <div className='ui center aligned container'>\n        <h1>{this.renderQuestionInfo('category')}</h1>\n        <QuestionCard renderQuestionInfo={this.renderQuestionInfo} navigateToResults={this.navigateToResults} />\n        <p>{this.props.questionNumber + 1} of {this.props.questions.length}</p>\n      </div>\n    )\n  }\n}\n\n// mapStateToProps to update props when redux state changes\nconst mapStateToProps = (state) => {\n  return {\n    questions: state.questions,\n    questionNumber: state.count\n  }\n}\n\nexport default connect(mapStateToProps, { fetchQuestions })(Quiz)","import React from 'react'\nimport DOMPurify from 'dompurify'\nimport { connect } from 'react-redux'\nimport { incrementReset, answersReset } from '../actions'\n\nclass Results extends React.Component {\n  numberCorrect = () => {\n    return this.props.answers.filter(answer => answer.isCorrect).length\n  }\n  renderIcon = (answer) => {\n    return answer.isCorrect ? <p><i className=\"green check icon\"></i>Correct</p> : <p><i className=\"red times icon\"></i>Incorrect</p>\n  }\n  // reset Redux store for increment and answers, navigate back to /quiz to play again\n  playAgain = () => {\n    this.props.incrementReset()\n    this.props.answersReset()\n    this.props.history.push({\n      pathname: '/quiz'\n    })\n  }\n  render() {\n    return(\n      <div className='ui center aligned container'>\n        <h1>You Scored</h1>\n        <h2>{this.numberCorrect()} / {this.props.answers.length}</h2>\n        {\n          this.props.answers.map((answer, i) => {\n            return(\n              <div className='ui grid' key={`Question${i}`}>\n                <div className='three wide column'>\n                  {this.renderIcon(answer)}\n                </div>\n                <div className='thirteen wide column'>\n                  <div className='ui segment'>\n                    <p className='ui center aligned'>\n                      Question:\n                      <br />\n                      {DOMPurify.sanitize(this.props.questions[i].question)}\n                    </p>\n                    <div className='ui divider'></div>\n                    <div className='ui two column very relaxed grid'>\n                      <div className='column'>\n                        Your answer: {answer.answerChosen}\n                      </div>\n                      <div className='column'>\n                        Correct answer: {answer.correctAnswer}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )\n          })\n        }\n\n        <button className='ui button' style={{margin: '2rem'}} onClick={this.playAgain}>Play Again</button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    questions: state.questions,\n    answers: state.answers\n  }\n}\n\nexport default connect(mapStateToProps, { incrementReset, answersReset })(Results)","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Intro from './Intro'\nimport Quiz from './Quiz'\nimport Results from './Results'\n\nconst Routes = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path='/quiz' component={Quiz} />\n        <Route path='/results' component={Results} />\n        <Route path='/' component={Intro} />\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nexport default Routes","import { combineReducers } from 'redux'\nimport questionsReducer from './questionsReducer'\nimport incrementReducer from './incrementReducer'\nimport answerReducer from './answerReducer'\n\n// redux combine reducers\nexport default combineReducers({\n  questions: questionsReducer,\n  count: incrementReducer,\n  answers: answerReducer\n})","// redux reducer\nexport default (state = [], action) => {\n  switch (action.type) {\n    case 'FETCH_QUESTIONS':\n      return action.payload\n    default:\n      return state\n  }\n}","// redux reducer\nexport default (count = 0, action) => {\n  if (action.type === 'INCREMENT') {\n    return count + 1\n  }\n  if (action.type === 'INCREMENT_RESET') {\n    return 0\n  }\n\n  return count\n}","// redux reducer\nexport default (answers = [], action) => {\n  if (action.type === 'LOG_ANSWER') {\n    return [...answers, action.payload]\n  }\n  if (action.type === 'ANSWERS_RESET') {\n    return []\n  }\n\n  return answers\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport Routes from './components/Routes'\nimport reducers from './reducers'\n\nReactDOM.render(\n  <Provider store={createStore(reducers, applyMiddleware(thunk))}>\n    <Routes />\n  </Provider>,\n  document.querySelector('#root')\n)"],"sourceRoot":""}